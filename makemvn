#!/bin/bash
#########################################################################
# File Name: makemvn
# Author: Carson Wang
# mail: carson.wang@droi.com
# Created Time: 2017-03-14 11:27:56
#########################################################################

BLACK="\033[0;30m"    RED="\033[0;31m"  GREEN="\033[0;32m"  ORANGE="\033[0;33m" BLUE="\033[0;34m"   PURPLE="\033[0;35m" CYAN="\033[0;36m" LIGHT_GRAY="\033[0;37m"   DARK_GRAY="\033[1;30m"    LIGHT_RED="\033[1;31m"  LIGHT_GREEN="\033[1;32m"  YELLOW="\033[1;33m" LIGHT_BLUE="\033[1;34m"   LIGHT_PURPLE="\033[1;35m" LIGHT_CYAN="\033[1;36m" WHITE="\033[1;37m" NC="\033[0m"


meta_file="maven-metadata.xml"
now=$(date +"%Y%m%d%H%M%S")
parent_dir="$PWD"




#-- introduction to makemvn
version="0.0.2"
intro="MakeMaven Command Line Interface
Version:$version written by Carson Wang

Gerenal Usage:
  ${LIGHT_GREEN}makemvn [command] [<args>]${NC}

These are common Makemvn commands used in various situations.

Available Commands:
  ${LIGHT_BLUE}[--help] [--version] [--init] [--run]${NC}
  version     Print version number of Makemvn
  init        Initialize maven project
  run         Deploy maven's template

Abbreviated comparison:
  ${LIGHT_BLUE}[-h] [-v] [-i] [-r]${NC}

See 'makemvn [command] --help' or 'makemvn [command] -h' to read about a specific subcommand excluding [--help] [--version]."

intro_init="Initialize maven project

Usages:
  mmakemvn --init \$groupid \$artifactid
  makemvn init \$groupid \$artifactid
  makemvn -i \$groupid \$artifactid
  makemvn --init
  makemvn init
  makemvn -i

Define arguments:
  groupid       It will identify project uniquely across all projects. eg. ${LIGHT_PURPLE}'org.apache.maven'${NC}, ${LIGHT_PURPLE}'org.apache.commons'${NC}
  artifactid    It's the name of the jar without version. eg. ${LIGHT_PURPLE}'maven'${NC}, ${LIGHT_PURPLE}'commons-math'${NC}

  See more on maven official webpage: https://maven.apache.org/guides/mini/guide-naming-conventions.html"

intro_run="Deploy maven's template

Usages:
  makemvn --run \$file_path
  makemvn run \$file_path
  makemvn -r \$file_path

Define argument:
  file_path     Input a jar or aar file."




#-- other variables



#-- check OS to determine sed's mode
if [ "$(uname)" = "Darwin" ]; then
    #echo "Do something under Mac OS X platform"
    sed_mode="-ie"
    grep_mode="-Eo"
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
    #echo "Do something under GNU/Linux platform"
    sed_mode="-i"
    grep_mode="-Po"
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ]; then
    echo "Do something under 32 bits Windows NT platform"
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW64_NT" ]; then
    echo "Do something under 64 bits Windows NT platform"
fi


#-- search wrong args to give suggestion
suggestion(){
    command="${1//[!a-zA-Z]/}"
    if [[ "$command" = "h"* ]]; then echo "Did you mean this?"; echo $'\t'help;
    elif [[ "$command" = "v"* ]]; then echo "Did you mean this?"; echo $'\t'version;
    elif [[ "$command" = "i"* ]]; then echo "Did you mean this?"; echo $'\t'init;
    elif [[ "$command" = "r"* ]]; then echo "Did you mean this?"; echo $'\t'run;
    elif [[ "$command" = "p"* ]]; then echo "Did you mean this?"; echo $'\t'push;
    fi
}


init(){
    echo "Initializing maven project..."
    #-- check args to set groupId and artifactId
    if [ -z "$1" -o -z "$2" -o -n "$3" ]; then
        echo -e "${LIGHT_RED}Initialization failed.${NC}"
        echo "Two arguments, which are groupid and artifactid, are required."
        echo "Use 'makemvn init --help' or 'makemvn -i --help' to see more."
        echo "Do you want to continue running 'makemvn init' command [y/n]?"
        echo "If yes, it will lead you to execute; otherwise, the program will terminate."
        while true; do
            read yn
            case $yn in
                [Yy]* )
                    echo "Please enter your groupID, such as, 'com.idroi' or 'com idroi'."
                    read groupIdArry
                    echo "Please enter your artifactId, such as, 'infohub'."
                    read artifactIdArray
                    break;;
                [Nn]* ) exit;;
                * ) echo -e "${LIGHT_RED}Input error. Please answer yes or no.${NC}";;
            esac
        done
        groupId=($groupIdArry)
        groupId="$( IFS=$'.'; echo "${groupId[*]}" )"
        artifactId=($artifactIdArray)
        artifactId="$( IFS=$''; echo "${artifactId[*]}" )"

    else
        groupId="$1"
        artifactId="$2"
    fi

    #-- search location of jar or aar file (use extension to decide)
    while true; do
        read -e -p "Please enter your jar or aar file path: " file_path
        if [ -f "$file_path" ]; then
            array=(${file_path//// })
            file="${array[${#array[@]}-1]}"
            array=(${file//./ })
            extension="${array[${#array[@]}-1]}"
            if [ "$extension" = "jar" -o "$extension" = "aar" ]; then
                break
            else
                echo -e "${LIGHT_RED}Input error. Please answer jar or aar file location.${NC}"
            fi
        else
            echo -e "${LIGHT_RED}Input error. Please answer jar or aar file location.${NC}"
        fi
    done

    packaging="$extension"
    #-- initialize init's version
    while true; do
        read -e -p "Please enter your initial version, such as, '0.0.1' or '0 0 1': " init_version
        if [[ $init_version =~ ^[0-9]*.[0-9]*.[0-9]*$ ]]; then
            init_version=($init_version)
            init_version="$( IFS=$'.'; echo "${init_version[*]}" )"
            break
        else
            echo -e "${LIGHT_RED}Input error. Please answer numbers, such as, '0.0.1' or '0 0 1'.${NC}"
        fi
    done

    #-- create makemvn project to initialize
    mkdir -p ".makemvn"
    cd ".makemvn"
    project_data="{\"groupId\":$groupId,
\"artifactId\":$artifactId,
\"packaging\":$packaging,
\"version\":$init_version}"
    echo "$project_data" > "makemvn.project"
    cd ..

    #-- create dir (deep groupId and artifactId)
    array=(${groupId//./ })
    for i in "${!array[@]}"; do
        mkdir -p "${array[i]}"
        cd "${array[i]}"
        if [ -z "$project_dir" ]; then
            project_dir="${array[i]}"
        else
            project_dir="$project_dir/${array[i]}"
        fi
    done
    mkdir -p "$artifactId"
    cd "$artifactId"
    project_dir="$project_dir/$artifactId"

    #-- create maven-metadata.xml
    meta_data="<metadata>
  <groupId>$groupId</groupId>
  <artifactId>$artifactId</artifactId>
  <versioning>
    <release>$init_version</release>
    <versions>
      <version>$init_version</version>
    </versions>
    <lastUpdated>$now</lastUpdated>
  </versioning>
</metadata>"
    echo "$meta_data" > "$meta_file"

    #-- create pom file
    mkdir -p "$init_version"
    cd "$init_version"
    pom_data="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"
    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">
  <modelVersion>4.0.0</modelVersion>
  <groupId>$groupId</groupId>
  <artifactId>$artifactId</artifactId>
  <version>$init_version</version>
  <packaging>$packaging</packaging>
  <description>POM was created from install:install-file</description>
</project>"
    echo "$pom_data" > "$artifactId-$init_version.pom"

    #-- create jar or aar file
    cd "$parent_dir"
    cp "$file_path" "$project_dir/$init_version/$artifactId-$init_version.$packaging"
    echo -e "${LIGHT_GREEN}Initialized successfully.${NC}"
}


run(){
    echo "Deploying maven's template..."
    if [ -f ./.makemvn/makemvn.project ]; then
        if [ -f "$1" -a -z "$2" ]; then
            array=(${1//// })
            file="${array[${#array[@]}-1]}"
            array=(${file//./ })
            extension="${array[${#array[@]}-1]}"
            if [ "$extension" = "jar" -o "$extension" = "aar" ]; then
                old=$( grep -Eo "\"version\":.*?[^\]}" "./.makemvn/makemvn.project" )
                old=$( echo $old | tr -d -c 0-9.)
                echo "Please enter your new version, such as, '0.0.1' or '0 0 1'."
                while true; do
                    read project_version
                    if [[ $project_version =~ ^[0-9]*.[0-9]*.[0-9]*$ ]]; then
                        new=($project_version)
                        new="$( IFS=$'.'; echo "${new[*]}" )"

                        array=(${old//./ })
                        check_old="$( IFS=$''; echo "${array[*]}" )"
                        array=(${new//./ })
                        check_new="$( IFS=$''; echo "${array[*]}" )"

                        if [ "$check_new" -gt "$check_old" ]; then
                            break;
                        else
                            echo "\033[31;1mInput error.\033[m"
                            echo "Old version number >= News version number."
                        fi
                    else
                        echo "\033[31;1mInput error.\033[m"
                        echo "Please answer numbers, such as, '0.0.1' or '0 0 1'."
                    fi
                done

                groupId=$( grep "$grep_mode" "\"groupId\":.*?[^\]," "./.makemvn/makemvn.project" )
                array=(${groupId//:/ })
                array=(${array[1]//,/ })
                groupId=${array}

                artifactId=$( grep "$grep_mode" "\"artifactId\":.*?[^\]," "./.makemvn/makemvn.project" )
                array=(${artifactId//:/ })
                array=(${array[1]//,/ })
                artifactId=${array}

                array=(${groupId//./ })
                for i in "${!array[@]}"; do
                    if [ -z "$project_dir" ]; then
                        project_dir="${array[i]}"
                    else
                        project_dir="$project_dir/${array[i]}"
                    fi
                done
                project_dir="$project_dir/$artifactId"

                old_dir="$project_dir/$old"
                new_dir="$project_dir/$new"

                #-- create directory for new version
                mkdir -p $new_dir
                cp $old_dir/$artifactId-$old.pom $new_dir/$artifactId-$new.pom

                #-- revise aar and pom
                sed $sed_mode "s/$old/$new/g" $new_dir/$artifactId-$new.pom
                cp $1 $new_dir/$artifactId-$new.$extension

                #-- change directory to revise maven-metadata and last updated
                cd $project_dir
                sed $sed_mode "/<release>/c\ \ \ \ <release>$new<\/release>" $meta_file
                sed $sed_mode "/<version>$old<\/version>/a \ \ \ \ \ \ <version>$new<\/version>" $meta_file
                sed $sed_mode "/<lastUpdated>/c\ \ \ \ <lastUpdated>$now<\/lastUpdated>" $meta_file

                #-- delete backup files (name: ***e) when OS is Mac
                if [ "$sed_mode" = "-ie" ]; then
                    rm "$meta_file"e
                    rm $new/$artifactId-$new.pome
                fi

                cd $parent_dir
                sed $sed_mode "/\"version\":$old/c\"version\":$new\}" "./.makemvn/makemvn.project"
                echo "\033[32;1mDeployed successfully.\033[m"
            else
                echo "\033[31;1mDeployment error.\033[m"
                echo "$file isn't a jar or aar file."
                echo "Use 'makemvn run --help' or 'makemvn -r --help' to see more."
            fi
        elif [ -n "$2" -o -z "$1" ]; then
            echo "\033[31;1mDeployment error.\033[m"
            echo "Use 'makemvn run --help' or 'makemvn -r --help' to see more."
        else
            echo "\033[31;1mDeployment error.\033[m"
            echo "Can't find such file: $1"
            echo "Use 'makemvn run --help' or 'makemvn -r --help' to see more."
        fi
    else
        echo "\033[31;1mDeployment error.\033[m"
        echo "Can't find working directory: $PWD/.makemvn"
        echo "Please take 'makemvn init \$groupId \$artifactId' to initialize project first."
        echo "Use 'makemvn init --help' or 'makemvn -i --help' to see more."
    fi
}



#-- begin to run
#-- check command argument
if [ -z "$1" ]; then
    echo -e "$intro"
    exit 0
elif [ "$1" = "-h" -o "$1" = "--help" -o "$1" = "help" ]; then
    echo -e "$intro"
    exit 0
elif [ "$1" = "-v" -o "$1" = "--version" -o "$1" = "version" ]; then
    echo "Makemvn version $version"
    exit 0
elif [ "$1" = "-i" -o "$1" = "--init" -o "$1" = "init" ]; then
    if [ "$2" = "-h" -o "$2" = "--help" -o "$2" = "help" ]; then
        echo -e "$intro_init"
    else
        init "$2" "$3" "$4"
    fi
    exit 0
elif [ "$1" = "-r" -o "$1" = "--run" -o "$1" = "run" ]; then
    if [ "$2" = "-h" -o "$2" = "--help" -o "$2" = "help" ]; then
        echo -e "$intro_run"
    else
        echo "run"
        #run "$2" "$3"
    fi
    exit 0
else
    echo -e "${LIGHT_RED}Unknown command '$1' for 'makemvn'.${NC}"
    echo "Use 'makemvn --help' or 'makemvn -h' to see more."
    suggestion "$1"
    exit -1
fi

#!/bin/sh
#########################################################################
# File Name: makemvn
# Author: Carson Wang
# mail: carson.wang@droi.com
# Created Time: 2017-03-14 11:27:56
#########################################################################


meta_file='maven-metadata.xml'
now=$(date +'%Y%m%d%H%M%S')
parent_dir="$PWD"

version='0.0.2'
intro="MakeMaven Command Line Interface
Version:$version written by Carson Wang

Gerenal Usage:
  \033[32;1mmakemvn [command] [<args>]\033[m

These are common Makemvn commands used in various situations.

Available Commands:
  \033[34;1m[--help] [--version] [--init] [--run]\033[m
  version     Print version number of Makemvn
  init        Initialize maven project
  run         Deploy maven's template

Abbreviated comparison:
  \033[34;1m[-h] [-v] [-i] [-r]\033[m

See 'makemvn [command] --help' or 'makemvn [command] -h' to read about a specific subcommand excluding [--help] [--version]."

intro_init="Initialize maven project

Usages:
  mmakemvn --init \$groupid \$artifactid
  makemvn init \$groupid \$artifactid
  makemvn -i \$groupid \$artifactid
  makemvn --init
  makemvn init
  makemvn -i

Define arguments:
  groupid       It will identify project uniquely across all projects. eg. \033[35;1m'org.apache.maven'\033[m, \033[35;1m'org.apache.commons'\033[m
  artifactid    It's the name of the jar without version. eg. \033[35;1m'maven'\033[m, \033[35;1m'commons-math'\033[m

  See more on maven official webpage: https://maven.apache.org/guides/mini/guide-naming-conventions.html"


intro_run="Deploy maven's template

Usages:
  makemvn --run \$file_path
  makemvn run \$file_path
  makemvn -r \$file_path

Define argument:
  file_path     It's a jar or aar file."

#-- check OS to determine sed's mode
if [ "$(uname)" == "Darwin" ]; then
    #echo "Do something under Mac OS X platform"
    sed_mode="-ie"
    grep_mode="-Eo"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    #echo "Do something under GNU/Linux platform"
    sed_mode="-i"
    grep_mode="-Po"
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]; then
    echo "Do something under 32 bits Windows NT platform"
elif [ "$(expr substr $(uname -s) 1 10)" == "MINGW64_NT" ]; then
    echo "Do something under 64 bits Windows NT platform"
fi


suggestion(){
    command="$1"
    command="${command//[!a-zA-Z]/}"
    if [[ "$command" == "h"* ]]; then
        echo "Did you mean this?"
        echo "\thelp"
    elif [[ "$command" == "v"* ]]; then
        echo "Did you mean this?"
        echo "\tversion"
    elif [[ "$command" == "i"* ]]; then
        echo "Did you mean this?"
        echo "\tinit"
    elif [[ "$command" == "r"* ]]; then
        echo "Did you mean this?"
        echo "\trun"
    elif [[ "$command" == "p"* ]]; then
        echo "Did you mean this?"
        echo "\tpush"
    fi
}



init(){
    echo "Initializing maven project..."

    if [ -z "$1" -o -z "$2" -o -n "$3" ]; then
        echo "\033[31;1mInitialization failed.\033[m"
        echo "Two arguments, which are groupid and artifactid, are required."
        echo "Use 'makemvn init --help' or 'makemvn -i --help' to see more."
        echo "Do you want to continue running 'makemvn init' command [y/n]?"
        echo "If yes, it will lead you to execute; otherwise, the program will terminate."
        while true; do
            read yn
            case $yn in
                [Yy]* )
                    echo "Please enter your groupID, such as, 'com.idroi' or 'com idroi'."
                    read groupIdArry
                    echo "Please enter your artifactId, such as, 'infohub'."
                    read artifactIdArray
                    break;;
                [Nn]* ) exit;;
                * ) echo "\033[31;1mInput error. Please answer yes or no.\033[m";;
            esac
        done
        groupId=($groupIdArry)
        groupId="$( IFS=$'.'; echo "${groupId[*]}" )"
        artifactId=($artifactIdArray)
        artifactId="$( IFS=$''; echo "${artifactId[*]}" )"

    else
        groupId="$1"
        artifactId="$2"
    fi

    while true; do
        read -e -p "Please enter your jar or aar file path: " file_path
        if [ -f "$file_path" ]; then
            array=(${file_path//// })
            file="${array[${#array[@]}-1]}"
            array=(${file//./ })
            extension="${array[${#array[@]}-1]}"
            if [ "$extension" == "jar" -o "$extension" == "aar" ]; then
                break
            else
                echo "\033[31;1mInput error. Please answer jar or aar.\033[m"
            fi
        else
            echo "\033[31;1mInput error. Please answer jar or aar.\033[m"
        fi
    done

    packaging="$extension"
    mkdir -p ".makemvn"
    cd ".makemvn"
    project_data="{\"groupId\":$groupId,
\"artifactId\":$artifactId,
\"packaging\":$packaging,
\"version\":0.0.1}"
    echo "$project_data" > "makemvn.project"
    cd ..

    array=(${groupId//./ })
    for i in "${!array[@]}"; do
        mkdir -p "${array[i]}"
        cd "${array[i]}"
        if [ -z "$project_dir" ]; then
            project_dir="${array[i]}"
        else
            project_dir="$project_dir/${array[i]}"
        fi
    done
    mkdir -p "$artifactId"
    cd "$artifactId"
    project_dir="$project_dir/$artifactId"

    meta_data="<metadata>
  <groupId>$groupId</groupId>
  <artifactId>$artifactId</artifactId>
  <versioning>
    <release>0.0.1</release>
    <versions>
      <version>0.0.1</version>
    </versions>
    <lastUpdated>$now</lastUpdated>
  </versioning>
</metadata>"
    echo "$meta_data" > $meta_file

    mkdir -p "0.0.1"
    cd "0.0.1"
    pom_data="<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"
    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">
  <modelVersion>4.0.0</modelVersion>
  <groupId>$groupId</groupId>
  <artifactId>$artifactId</artifactId>
  <version>0.0.1</version>
  <packaging>$packaging</packaging>
  <description>POM was created from install:install-file</description>
</project>"
    echo "$pom_data" > "$artifactId-0.0.1.pom"

    cd $parent_dir
    cp $file_path $project_dir/0.0.1/$artifactId-0.0.1.$packaging
    echo "\033[32;1mInitialized successfully.\033[m"
}

run(){
    echo "Deploying maven's template..."
    if [ -f ./.makemvn/makemvn.project ]; then
        if [ -f "$1" -a -z "$2" ]; then
            array=(${1//// })
            file="${array[${#array[@]}-1]}"
            array=(${file//./ })
            extension="${array[${#array[@]}-1]}"
            if [ "$extension" == "jar" -o "$extension" == "aar" ]; then
                old=$( grep -Eo "\"version\":.*?[^\]}" "./.makemvn/makemvn.project" )
                old=$( echo $old | tr -d -c 0-9.)
                echo "Please enter your new version, such as, '0.0.1' or '0 0 1'."
                while true; do
                    read project_version
                    if [[ $project_version =~ ^[0-9]*.[0-9]*.[0-9]*$ ]]; then
                        new=($project_version)
                        new="$( IFS=$'.'; echo "${new[*]}" )"

                        array=(${old//./ })
                        check_old="$( IFS=$''; echo "${array[*]}" )"
                        array=(${new//./ })
                        check_new="$( IFS=$''; echo "${array[*]}" )"

                        if [ "$check_new" -gt "$check_old" ]; then
                            break;
                        else
                            echo "\033[31;1mInput error.\033[m"
                            echo "Old version number >= News version number."
                        fi
                    else
                        echo "\033[31;1mInput error.\033[m"
                        echo "Please answer numbers, such as, '0.0.1' or '0 0 1'."
                    fi
                done

                groupId=$( grep "$grep_mode" "\"groupId\":.*?[^\]," "./.makemvn/makemvn.project" )
                array=(${groupId//:/ })
                array=(${array[1]//,/ })
                groupId=${array}

                artifactId=$( grep "$grep_mode" "\"artifactId\":.*?[^\]," "./.makemvn/makemvn.project" )
                array=(${artifactId//:/ })
                array=(${array[1]//,/ })
                artifactId=${array}

                array=(${groupId//./ })
                for i in "${!array[@]}"; do
                    if [ -z "$project_dir" ]; then
                        project_dir="${array[i]}"
                    else
                        project_dir="$project_dir/${array[i]}"
                    fi
                done
                project_dir="$project_dir/$artifactId"

                old_dir="$project_dir/$old"
                new_dir="$project_dir/$new"

                #-- create directory for new version
                mkdir -p $new_dir
                cp $old_dir/$artifactId-$old.pom $new_dir/$artifactId-$new.pom

                #-- revise aar and pom
                sed $sed_mode "s/$old/$new/g" $new_dir/$artifactId-$new.pom
                cp $1 $new_dir/$artifactId-$new.$extension

                #-- change directory to revise maven-metadata and last updated
                cd $project_dir
                sed $sed_mode "/<release>/c\ \ \ \ <release>$new<\/release>" $meta_file
                sed $sed_mode "/<version>$old<\/version>/a \ \ \ \ \ \ <version>$new<\/version>" $meta_file
                sed $sed_mode "/<lastUpdated>/c\ \ \ \ <lastUpdated>$now<\/lastUpdated>" $meta_file

                #-- delete backup files (name: ***e) when OS is Mac
                if [ "$sed_mode" == "-ie" ]; then
                    rm "$meta_file"e
                    rm $new/$artifactId-$new.pome
                fi

                cd $parent_dir
                sed $sed_mode "/\"version\":$old/c\"version\":$new\}" "./.makemvn/makemvn.project"
                echo "\033[32;1mDeployed successfully.\033[m"
            else
                echo "\033[31;1mDeployment error.\033[m"
                echo "$file isn't a jar or aar file."
                echo "Use 'makemvn run --help' or 'makemvn -r --help' to see more."
            fi
        elif [ -n "$2" -o -z "$1" ]; then
            echo "\033[31;1mDeployment error.\033[m"
            echo "Use 'makemvn run --help' or 'makemvn -r --help' to see more."
        else
            echo "\033[31;1mDeployment error.\033[m"
            echo "Can't find such file: $1"
            echo "Use 'makemvn run --help' or 'makemvn -r --help' to see more."
        fi
    else
        echo "\033[31;1mDeployment error.\033[m"
        echo "Can't find working directory: $PWD/.makemvn"
        echo "Please take 'makemvn init \$groupId \$artifactId' to initialize project first."
        echo "Use 'makemvn init --help' or 'makemvn -i --help' to see more."
    fi
}


#-- check command argument
if [ -z "$1" ]; then
    echo "$intro"
    exit 0
elif [ "$1" == "-h" -o "$1" == "--help" -o "$1" == "help" ]; then
    echo "$intro"
    exit 0
elif [ "$1" == "-v" -o "$1" == "--version" -o "$1" == "version" ]; then
    echo "Makemvn version $version"
    exit 0
elif [ "$1" == "-i" -o "$1" == "--init" -o "$1" == "init" ]; then
    if [ "$2" == "-h" -o "$2" == "--help" -o "$2" == "help" ]; then
        echo "$intro_init"
    else
        init "$2" "$3" "$4"
    fi
    exit 0
elif [ "$1" == "-r" -o "$1" == "--run" -o "$1" == "run" ]; then
    if [ "$2" == "-h" -o "$2" == "--help" -o "$2" == "help" ]; then
        echo "$intro_run"
    else
        run "$2" "$3"
    fi
    exit 0
else
    echo "\033[31;1mUnknown command '$1' for 'makemvn'.\033[m"
    echo "Use 'makemvn --help' or 'makemvn -h' to see more."
    suggestion "$1"
    exit -1
fi
